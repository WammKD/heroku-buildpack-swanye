#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
#set -ex

# parse and derive params
LP_DIR=`cd $(dirname $0); cd ..; pwd`
BUILD_DIR=$1
CACHE_DIR=$2
INDUSTRIA_VERSION=2.1.0
MSMTP_VERSION=1.8.11

function indent() {
	c='s/^/       /'

	case $(uname) in
		Darwin)
			sed -l "$c"
			;;
		*)
			sed -u "$c"
			;;
	esac
}

function topic() {
	echo "-----> $*"
}



# APT_CACHE_DIR="$CACHE_DIR/apt-swanye/cache"
# APT_STATE_DIR="$CACHE_DIR/apt-swanye/state"
# APT_SOURCELIST_DIR="$CACHE_DIR/apt-swanye/sources"   # place custom sources.list here
# APT_SOURCES="$APT_SOURCELIST_DIR/sources.list"
# APT_VERSION=$(apt-get -v | awk 'NR == 1{ print $2 }')

# # Store which STACK we are running on in the cache to bust the cache if it changes
# if [ -f $CACHE_DIR/.apt/STACK ]; then
#   CACHED_STACK=$(cat "$CACHE_DIR/.apt/STACK")
# else
#   CACHED_STACK=$STACK
# fi

# # Ensure we store the STACK in the cache for next time.
# mkdir -p "$CACHE_DIR/.apt"
# echo "$STACK" > "$CACHE_DIR/.apt/STACK"

# case "$APT_VERSION" in
# 	0* | 1.0*)
# 		APT_FORCE_YES="--force-yes"
# 		;;
# 	*)
#     APT_FORCE_YES="--allow-downgrades --allow-remove-essential --allow-change-held-packages"
# 		;;
# esac

# if
# 	[[ $CACHED_STACK == $STACK ]]
# then
# 	# STACK has not changed
# 	topic "Reusing cache"
# else
# 	# STACK changed
# 	topic "Detected Stack changes, flushing cache"

# 	rm -rf $APT_CACHE_DIR
# fi

# APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"
# # Override the use of /etc/apt/sources.list (sourcelist) and /etc/apt/sources.list.d/* (sourceparts).
# APT_OPTIONS="$APT_OPTIONS -o dir::etc::sourcelist=$APT_SOURCES -o dir::etc::sourceparts=/dev/null"



# mkdir -p "$APT_CACHE_DIR/archives/partial"
# mkdir -p "$APT_STATE_DIR/lists/partial"
# mkdir -p "$APT_SOURCELIST_DIR"   # make dir for sources
# cat "/etc/apt/sources.list" > "$APT_SOURCES"    # no cp here



# topic "Updating apt caches"
# apt-get $APT_OPTIONS update | indent
# apt-get $APT_OPTIONS -y $APT_FORCE_YES -d install --reinstall msmtp | indent

# mkdir -p $BUILD_DIR/.apt

# for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
# 	topic "Installing $(basename $DEB)"

# 	dpkg -x $DEB $BUILD_DIR/.apt/
# done


if
	[ ! -f $CACHE_DIR/.apt/bin/art ]
then
	cd /tmp

	topic "Installing msmtp"
	wget -c https://marlam.de/msmtp/releases/msmtp-$MSMTP_VERSION.tar.xz && \
		tar xJf msmtp-$MSMTP_VERSION.tar.xz                                && \
		rm -f msmtp-$MSMTP_VERSION.tar.xz                                  && \
		cd msmtp-$MSMTP_VERSION                                            && \
		./configure --prefix=$BUILD_DIR/.apt/usr && make && make install   && cd ..


	topic "Installing Industria's Blowfish"
	wget -c https://github.com/weinholt/industria/archive/v$INDUSTRIA_VERSION.tar.gz                                        && \
		tar xvzf v$INDUSTRIA_VERSION.tar.gz                                                                                   && \
		rm -f v$INDUSTRIA_VERSION.tar.gz                                                                                      && \
		mkdir $BUILD_DIR/.apt/usr/share/guile/3.0/industria                                                                   && \
		mkdir $BUILD_DIR/.apt/usr/share/guile/3.0/industria/crypto                                                            && \
		cp industria-$INDUSTRIA_VERSION/crypto/blowfish.sls $BUILD_DIR/.apt/usr/share/guile/3.0/industria/crypto/blowfish.scm && \
		rm -rf industria-$INDUSTRIA_VERSION                                                                                   && cd ..
fi



echo "# Set default values for all following accounts."  >  $BUILD_DIR/.msmtprc
echo "defaults"                                          >> $BUILD_DIR/.msmtprc
echo "auth           on"                                 >> $BUILD_DIR/.msmtprc
echo "tls            on"                                 >> $BUILD_DIR/.msmtprc
echo "tls_trust_file /etc/ssl/certs/ca-certificates.crt" >> $BUILD_DIR/.msmtprc
echo "logfile        ~/.msmtp.log"                       >> $BUILD_DIR/.msmtprc
echo "# Gmail"                                           >> $BUILD_DIR/.msmtprc
echo "account        gmail"                              >> $BUILD_DIR/.msmtprc
echo "host           smtp.gmail.com"                     >> $BUILD_DIR/.msmtprc
echo "port           587"                                >> $BUILD_DIR/.msmtprc
echo "from           $EMAIL_ADDRESS"                     >> $BUILD_DIR/.msmtprc
echo "user           $EMAIL_ADDRESS"                     >> $BUILD_DIR/.msmtprc
echo "password       $EMAIL_PASSWORD"                    >> $BUILD_DIR/.msmtprc
echo "# Set a default account"                           >> $BUILD_DIR/.msmtprc
echo "account default : gmail"                           >> $BUILD_DIR/.msmtprc



#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH|PERL5LIB|GUILE_LOAD_PATH|GUILE_LOAD_COMPILED_PATH)=' > "$LP_DIR/export"
